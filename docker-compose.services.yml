version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: booking_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: apps/payment-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PAYMENT_SERVICE_PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_platform
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/payment-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 5

  # Reservation Service
  reservation-service:
    build:
      context: .
      dockerfile: apps/reservation-service/Dockerfile
    environment:
      - NODE_ENV=development
      - RESERVATION_SERVICE_PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_platform
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - '3002:3002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/reservation-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 5

  # Ledger Service
  ledger-service:
    build:
      context: .
      dockerfile: apps/ledger-service/Dockerfile
    environment:
      - NODE_ENV=development
      - LEDGER_SERVICE_PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_platform
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - '3003:3003'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/ledger-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 5

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: apps/notification-service/Dockerfile
    environment:
      - NODE_ENV=development
      - NOTIFICATION_SERVICE_PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_platform
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - '3004:3004'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/notification-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3004/health']
      interval: 30s
      timeout: 10s
      retries: 5

  # BullMQ UI for monitoring queues
  bullmq-ui:
    image: deadly0/bull-board
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    ports:
      - '3005:3000'
    depends_on:
      redis:
        condition: service_healthy

  # API Gateway (nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - '8080:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - payment-service
      - reservation-service
      - ledger-service
      - notification-service

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
