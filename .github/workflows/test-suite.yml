name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/

  # Job 2: API Integration Tests
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:reset
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test

      - name: Build applications
        run: npm run build

      - name: Start services
        run: |
          npm run gateway:start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test
          REDIS_URL: redis://localhost:6379

      - name: Run API tests
        run: npm run test:api

      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: |
            test-results/api-tests-results.xml
            coverage/api-tests/

  # Job 3: Contract Tests
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run contract tests
        run: npm run test:contract

      - name: Upload Pact files
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pact-contracts
          path: pacts/

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:reset
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test

      - name: Build applications
        run: |
          npm run admin-console:build
          npm run front-desk:build
          npm run gateway:build

      - name: Start services
        run: |
          npm run gateway:start &
          npm run admin-console:start &
          npm run front-desk:start &
          sleep 15
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test
          REDIS_URL: redis://localhost:6379

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: apps/admin-console
          start: npm run admin-console:dev
          wait-on: 'http://localhost:3001'
          wait-on-timeout: 120
          browser: chrome
          headless: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            apps/admin-console/cypress/screenshots/
            apps/admin-console/cypress/videos/
            apps/admin-console/cypress/reports/

  # Job 5: Load Tests
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:reset
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test

      - name: Build and start services
        run: |
          npm run build
          npm run gateway:start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/hotel_test
          REDIS_URL: redis://localhost:6379

      - name: Run load tests
        run: npm run test:load
        env:
          BASE_URL: http://localhost:3000

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: load-test-results.json

  # Job 6: Mutation Tests (only on main branch due to time/resource intensity)
  mutation-tests:
    name: Mutation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mutation tests
        run: npm run test:mutation
        timeout-minutes: 60

      - name: Upload mutation test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mutation-test-results
          path: |
            reports/mutation-report.html
            stryker-incremental.json

  # Job 7: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, contract-tests, e2e-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check unit tests
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check API tests
          if [ "${{ needs.api-tests.result }}" == "success" ]; then
            echo "| API Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| API Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check contract tests
          if [ "${{ needs.contract-tests.result }}" == "success" ]; then
            echo "| Contract Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Contract Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check E2E tests
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "| E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| E2E Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pullNumber = context.payload.pull_request.number;

            const unitTestsResult = '${{ needs.unit-tests.result }}';
            const apiTestsResult = '${{ needs.api-tests.result }}';
            const contractTestsResult = '${{ needs.contract-tests.result }}';
            const e2eTestsResult = '${{ needs.e2e-tests.result }}';

            const getStatusEmoji = (result) => result === 'success' ? '✅' : '❌';

            const comment = `## 🧪 Test Results

            | Test Type | Status |
            |-----------|--------|
            | Unit Tests | ${getStatusEmoji(unitTestsResult)} ${unitTestsResult} |
            | API Tests | ${getStatusEmoji(apiTestsResult)} ${apiTestsResult} |
            | Contract Tests | ${getStatusEmoji(contractTestsResult)} ${contractTestsResult} |
            | E2E Tests | ${getStatusEmoji(e2eTestsResult)} ${e2eTestsResult} |

            ${unitTestsResult === 'success' && apiTestsResult === 'success' && contractTestsResult === 'success' && e2eTestsResult === 'success' 
              ? '🎉 All tests passed!' 
              : '⚠️ Some tests failed. Please check the workflow logs for details.'}
            `;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pullNumber,
              body: comment
            });
