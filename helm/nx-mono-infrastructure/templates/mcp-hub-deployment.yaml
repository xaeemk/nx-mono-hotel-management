{{- if .Values.mcpHub.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nx-mono-infrastructure.fullname" . }}-mcp-hub
  labels:
    {{- include "nx-mono-infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: mcp-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "nx-mono-infrastructure.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mcp-hub
  template:
    metadata:
      labels:
        {{- include "nx-mono-infrastructure.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mcp-hub
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-npm
          image: "{{ .Values.mcpHub.image.repository }}:{{ .Values.mcpHub.image.tag }}"
          imagePullPolicy: {{ .Values.mcpHub.image.pullPolicy }}
          workingDir: /app
          command: ['sh', '-c']
          args:
            - |
              npm init -y
              npm install express cors helmet morgan winston pino pino-loki prom-client jaeger-client bull ioredis pg
          volumeMounts:
            - name: app-code
              mountPath: /app
            - name: mcp-hub-src
              mountPath: /src
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      containers:
        - name: mcp-hub
          image: "{{ .Values.mcpHub.image.repository }}:{{ .Values.mcpHub.image.tag }}"
          imagePullPolicy: {{ .Values.mcpHub.image.pullPolicy }}
          workingDir: /app
          command: ['node', 'server.js']
          ports:
            - name: http
              containerPort: {{ .Values.mcpHub.service.targetPort }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.mcpHub.env.NODE_ENV }}
            - name: PORT
              value: "{{ .Values.mcpHub.env.PORT }}"
            - name: POSTGRES_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ include "nx-mono-infrastructure.fullname" . }}-postgresql:5432/{{ .Values.postgresql.auth.database }}"
            - name: REDIS_URL
              value: "redis://{{ include "nx-mono-infrastructure.fullname" . }}-redis-master:6379"
            - name: JAEGER_ENDPOINT
              value: "http://{{ include "nx-mono-infrastructure.fullname" . }}-jaeger:14268/api/traces"
            - name: PROMETHEUS_GATEWAY
              value: "http://{{ include "nx-mono-infrastructure.fullname" . }}-prometheus-server:80"
            - name: LOKI_ENDPOINT
              value: "http://{{ include "nx-mono-infrastructure.fullname" . }}-loki:3100"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.mcpHub.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            - name: app-code
              mountPath: /app
            - name: mcp-hub-src
              mountPath: /src
      volumes:
        - name: app-code
          emptyDir: {}
        - name: mcp-hub-src
          configMap:
            name: {{ include "nx-mono-infrastructure.fullname" . }}-mcp-hub-src
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
